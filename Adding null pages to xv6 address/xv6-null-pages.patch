diff -ruN src/defs.h src-finished/defs.h
--- src/defs.h	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/defs.h	2022-07-02 16:58:40.000000000 -0700
@@ -185,6 +185,8 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+int             mprotect(void*, int);
+int             munprotect(void*, int);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -ruN src/exec.c src-finished/exec.c
--- src/exec.c	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/exec.c	2022-07-02 16:59:22.000000000 -0700
@@ -39,7 +39,7 @@
     goto bad;
 
   // Load program into memory.
-  sz = 0;
+  sz = PGSIZE;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
       goto bad;
diff -ruN src/Makefile src-finished/Makefile
--- src/Makefile	2020-02-18 18:04:22.000000000 -0800
+++ src-finished/Makefile	2022-07-02 16:56:06.000000000 -0700
@@ -146,7 +146,7 @@
 ULIB = ulib.o usys.o printf.o umalloc.o
 
 _%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o $@ $^
 	$(OBJDUMP) -S $@ > $*.asm
 	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
 
diff -ruN src/Makefile.test src-finished/Makefile.test
--- src/Makefile.test	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/Makefile.test	2022-07-03 15:09:14.272921718 -0700
@@ -76,7 +76,7 @@
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -fno-delete-null-pointer-checks -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -146,7 +146,7 @@
 ULIB = ulib.o usys.o printf.o umalloc.o
 
 _%: %.o $(ULIB)
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0x1000 -o $@ $^
 	$(OBJDUMP) -S $@ > $*.asm
 	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
 
diff -ruN src/syscall.c src-finished/syscall.c
--- src/syscall.c	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/syscall.c	2022-07-02 17:02:08.000000000 -0700
@@ -103,6 +103,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_mprotect(void);
+extern int sys_munprotect(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mprotect]   sys_mprotect,
+[SYS_munprotect] sys_munprotect,
 };
 
 void
diff -ruN src/syscall.h src-finished/syscall.h
--- src/syscall.h	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/syscall.h	2022-07-02 17:02:37.000000000 -0700
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mprotect 22
+#define SYS_munprotect 23
diff -ruN src/sysproc.c src-finished/sysproc.c
--- src/sysproc.c	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/sysproc.c	2022-07-03 14:16:00.000000000 -0700
@@ -89,3 +89,29 @@
   release(&tickslock);
   return xticks;
 }
+
+int 
+sys_mprotect(void)
+{
+  void *addr;
+  int len;
+
+  argint(0, (int*)&addr);
+
+  argint(1, &len);
+
+  return mprotect(addr, len);
+}
+
+int 
+sys_munprotect(void)
+{
+  void *addr;
+  int len;
+
+  argint(0, (int*)&addr);
+  
+  argint(1, &len);
+
+  return munprotect(addr, len);
+}
diff -ruN src/test_2.c src-finished/test_2.c
--- src/test_2.c	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/test_2.c	2022-07-03 15:09:14.272921718 -0700
@@ -4,6 +4,7 @@
 int
 main(int argc, char *argv[])
 {
+    printf(1, "XV6_TEST_OUTPUT: this should print\n");
     volatile char *p = (char *)0;
 
     *p; //page fault trap 14 should occur here
diff -ruN src/user.h src-finished/user.h
--- src/user.h	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/user.h	2022-07-02 17:04:50.000000000 -0700
@@ -23,6 +23,8 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int mprotect(void*, int);
+int munprotect(void*, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -ruN src/usys.S src-finished/usys.S
--- src/usys.S	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/usys.S	2022-07-02 17:05:04.000000000 -0700
@@ -29,3 +29,5 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(mprotect)
+SYSCALL(munprotect)
diff -ruN src/vm.c src-finished/vm.c
--- src/vm.c	2019-09-25 20:28:17.000000000 -0700
+++ src-finished/vm.c	2022-07-03 14:13:49.000000000 -0700
@@ -322,7 +322,7 @@
 
   if((d = setupkvm()) == 0)
     return 0;
-  for(i = 0; i < sz; i += PGSIZE){
+  for(i = PGSIZE; i < sz; i += PGSIZE){
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
@@ -385,6 +385,72 @@
   return 0;
 }
 
+int 
+mprotect(void *addr, int len)
+{
+  
+
+  if (len <= 0 || (uint)addr % PGSIZE != 0)
+  {
+    return -1;
+  }
+
+  
+  uint c_addr = (uint)addr;
+
+  pte_t *pte;
+  struct proc *c_proc = myproc();
+
+
+  do 
+  {
+    
+    pte = walkpgdir(c_proc->pgdir, (void *)c_addr , 0); 
+
+    *pte &= ~(PTE_W);
+    c_addr += PGSIZE;
+
+  } while(len -= 1 > 0);
+
+ 
+  lcr3(V2P(c_proc->pgdir));
+
+
+  return 0;
+}
+
+int 
+munprotect(void *addr, int len)
+{
+  
+  if (len <= 0 || (uint)addr % PGSIZE != 0)
+  {
+    return -1;
+  }
+
+  
+  uint c_addr = (uint)addr;
+
+  pte_t *pte;
+  struct proc *c_proc = myproc(); 
+
+  do 
+  {
+    
+    pte = walkpgdir(c_proc->pgdir, (void *)c_addr , 0);   
+    *pte |= (PTE_W);
+
+    c_addr += PGSIZE;
+  } while(len -= 1 > 0); 
+
+
+
+  lcr3(V2P(c_proc->pgdir));
+
+  return 0;
+}
+
+
 //PAGEBREAK!
 // Blank page.
 //PAGEBREAK!
